plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev.legacyforge' version '2.0.74'
    id 'com.hypherionmc.modutils.modpublisher' version '2.1.7'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

ext.buildNumber = System.getenv('BUILD_NUMBER')
ext.rawBranchName = System.getenv("BRANCH_NAME")
ext.branchName = rawBranchName ? rawBranchName.replaceAll("[^a-zA-Z0-9._-]", "_") : null

base {
    archivesName = "${mod_id}-${minecraft_version}"
    group = 'de.theidler.' + mod_id
    def isMainBranch = rawBranchName == "mc1.20.1/main"
    version = mod_version + (!isMainBranch && buildNumber ? "-${buildNumber}" : '') + (!isMainBranch && branchName ? "-${branchName}" : '')
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

legacyForge {
    version = "$minecraft_version-$forge_version"

    parchment {
        minecraftVersion = minecraft_version
        mappingsVersion = parchment_version
    }

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }

    runs {
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'
            logLevel = org.slf4j.event.Level.DEBUG
        }

        client {
            client()
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        gameTestServer {
            type = "gameTestServer"
            systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.createmod.net" } // Create, Ponder, Flywheel
    maven { url = "https://maven.tterrag.com" } // Registrate
    maven { url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/" } // ForgeConfigAPIPort
    maven { url = "https://maven.blamejared.com/" } // JEI
    maven { url = "https://dl.zznty.ru/maven" } // Create Factory Abstractions, Create Factory Logistics
    mavenCentral()
    mavenLocal()
    flatDir {
        dirs "libs"
    }
}

dependencies {
    modImplementation("com.simibubi.create:create-${minecraft_version}:${create_version}:slim") { transitive = false }
    modImplementation("net.createmod.ponder:Ponder-Forge-${minecraft_version}:${ponder_version}")
    modCompileOnly("dev.engine-room.flywheel:flywheel-forge-api-${minecraft_version}:${flywheel_version}")
    modRuntimeOnly("dev.engine-room.flywheel:flywheel-forge-${minecraft_version}:${flywheel_version}")
    modImplementation("com.tterrag.registrate:Registrate:${registrate_version}")
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation("io.github.llamalad7:mixinextras-forge:0.4.1")

    modImplementation("mezz.jei:jei-${minecraft_version}-forge:${jei_version}")
    modImplementation(jarJar("ru.zznty:create_factory_abstractions-${minecraft_version}:${create_factory_abstractions_version}"))
    modRuntimeOnly("ru.zznty:create_factory_logistics-${minecraft_version}:${create_factory_abstractions_version}")
    compileOnly("org.jetbrains:annotations:24.0.1")

    // testing mod compatibilities
    modRuntimeOnly("tschipp.carryon:carryon-forge-1.20.1:2.1.2.7")
}

tasks.named('processResources', ProcessResources).configure {
    def replaceProperties = [
            minecraft_version   : minecraft_version,
            minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version,
            forge_version_range : forge_version_range,
            loader_version_range: loader_version_range,
            mod_id             : mod_id,
            mod_name           : mod_name,
            mod_license        : mod_license,
            mod_version        : mod_version,
            mod_authors        : mod_authors,
            mod_description    : mod_description,
            mod_logo           : mod_logo,
            mod_display_url    : mod_display_url
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

publisher {

    apiKeys {
        modrinth System.getenv("MODRINTH_API_TOKEN")
        curseforge System.getenv("CURSEFORGE_API_TOKEN")
        github System.getenv("GITHUB_TOKEN")
    }

    setDebug(false)
    setCurseID("1232978")
    setModrinthID("1vXRfEHZ")
    setVersionType("release")
    setChangelog("CHANGELOG.md")
    setVersion("1.20.1-${project.mod_version}")
    setDisplayName("Create: Mobile Packages 1.20.1-${project.mod_version}")
    setGameVersions("1.20.1")
    setLoaders("forge")
    setCurseEnvironment("both")
    setArtifact(jar)
    setJavaVersions([JavaVersion.VERSION_17])

    modrinthDepends {
        required "create"
        optional "create_factory_logistics"
    }

    curseDepends {
        required "create"
        optional "create-factory-logistics"
    }

    github {
        repo = "timplay33/Create-Mobile-Packages"
        tag = "1.20.1-${project.mod_version}"
        target = "mc1.20.1/main"
    }
}